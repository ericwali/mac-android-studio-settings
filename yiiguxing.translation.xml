<application>
  <component name="AppStorage">
    <option name="newTranslationDialogX" value="548" />
    <option name="newTranslationDialogY" value="360" />
    <histories>
      <item value="Qualifier" />
      <item value="Singleton" />
      <item value="Preference Info" />
      <item value="Inject" />
      <item value="Database Info" />
      <item value="on Back Pressed" />
      <item value="ACTION DOWN" />
      <item value="Base Application" />
      <item value="set Application" />
      <item value="u can't instantiate me..." />
      <item value="Unsupported Operation Exception" />
      <item value="Static Field Leak" />
      <item value="bind To Lifecycle" />
      <item value="Lifecycle Provider" />
      <item value="Transformer" />
      <item value="exception Transformer" />
      <item value="schedulers Transformer" />
      <item value="on Io Scheduler" />
      <item value="subscribe On" />
      <item value="upstream" />
      <item value="on Error Resume Next" />
      <item value="s View Weak Reference" />
      <item value="add Call Adapter Factory" />
      <item value="client" />
      <item value="observe On" />
      <item value="UNAUTH" />
      <item value="on Complete" />
      <item value="Json Parse Exception" />
      <item value="exception Msg" />
      <item value="Equals And Hash Code" />
      <item value="dismiss" />
      <item value="dismiss Dialog" />
      <item value="dismiss Dialog Event" />
      <item value="call" />
      <item value="Abstract base implementation of an Observer with support for cancelling a subscription via cancel() (synchronously) and calls onStart() when the subscription happens. All pre-implemented final methods are thread-safe. Use the protected cancel() to dispose the sequence from within an onNext implementation. Like all other consumers, DefaultObserver can be subscribed only once. Any subsequent attempt to subscribe it to a new source will yield an IllegalStateException with message &quot;It is not allowed to subscribe with a(n) &lt;class name&gt; multiple times.&quot;. Implementation of onStart(), onNext(Object), onError(Throwable) and onComplete() are not allowed to throw any unchecked exceptions. If for some reason this can't be avoided, use io.reactivex.Observable.safeSubscribe(Observer) instead of the standard subscribe() method." />
      <item value="Default Observer" />
      <item value="An abstract Observer that allows asynchronous cancellation of its subscription and associated resources. All pre-implemented final methods are thread-safe. To release the associated resources, one has to call dispose() in onError() and onComplete() explicitly. Use add(Disposable) to associate resources (as Disposables) with this ResourceObserver that will be cleaned up when dispose() is called. Removing previously associated resources is not possible but one can create a CompositeDisposable, associate it with this ResourceObserver and then addremove resources tofrom the CompositeDisposable freely. Use the dispose() to dispose the sequence from within an onNext implementation. Like all other consumers, ResourceObserver can be subscribed only once. Any subsequent attempt to subscribe it to a new source will yield an IllegalStateException with message &quot;It is not allowed to subscribe with a(n) &lt;class name&gt; multiple times.&quot;. Implementation of onStart(), onNext(Object), onError(Throwable) and onComplete() are not allowed to throw any unchecked exceptions. If for some reason this can't be avoided, use io.reactivex.Observable.safeSubscribe(Observer) instead of the standard subscribe() method." />
      <item value="Disposable" />
      <item value="Disposable Observer" />
      <item value="Base Response" />
      <item value="dispose" />
      <item value="Consumer" />
      <item value="disposable" />
      <item value="show Dialog" />
      <item value="subscribe" />
      <item value="do On Subscribe" />
      <item value="Single Live Event" />
      <item value="create Live Data" />
      <item value="show Dialog Event" />
      <item value="access Token" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1468" />
        <entry key="ENGLISH" value="1436" />
        <entry key="BULGARIAN" value="1" />
        <entry key="AFRIKAANS" value="2" />
        <entry key="FRENCH" value="3" />
        <entry key="FILIPINO" value="2" />
        <entry key="FINNISH" value="2" />
        <entry key="CATALAN" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SPANISH" value="2" />
        <entry key="ITALIAN" value="1" />
        <entry key="HINDI" value="4" />
        <entry key="INDONESIAN" value="1" />
        <entry key="VIETNAMESE" value="11" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1665714373235" />
  </component>
  <component name="Settings">
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="03d7d058148f84e9" />
        <option name="primaryLanguage" value="ESPERANTO" />
      </youdao-translate>
    </option>
  </component>
</application>